// Code generated by ogen, DO NOT EDIT.

package server

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	ProtectedHandler
	RbacHandler
	UnprotectedHandler
}

// ProtectedHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Protected
type ProtectedHandler interface {
	// GetProtectedResource implements getProtectedResource operation.
	//
	// Get a protected resource.
	//
	// GET /protected
	GetProtectedResource(ctx context.Context) (GetProtectedResourceRes, error)
}

// RbacHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Rbac
type RbacHandler interface {
	// CreateRbacResource implements createRbacResource operation.
	//
	// Create a resource that requires rbac.
	//
	// POST /rbac
	CreateRbacResource(ctx context.Context, req *RbacResource) (CreateRbacResourceRes, error)
	// GetRbacResource implements getRbacResource operation.
	//
	// Get a resource that requires rbac.
	//
	// GET /rbac
	GetRbacResource(ctx context.Context) (GetRbacResourceRes, error)
}

// UnprotectedHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Unprotected
type UnprotectedHandler interface {
	// GetUnprotectedResource implements getUnprotectedResource operation.
	//
	// Get an unprotected resource.
	//
	// GET /unprotected
	GetUnprotectedResource(ctx context.Context) (GetUnprotectedResourceRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
