// Code generated by ogen, DO NOT EDIT.

package server

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleBearerAuth handles BearerAuth security.
	HandleBearerAuth(ctx context.Context, operationName OperationName, t BearerAuth) (context.Context, error)
	// HandleRbac handles Rbac security.
	HandleRbac(ctx context.Context, operationName OperationName, t Rbac) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

var operationRolesBearerAuth = map[string][]string{
	CreateRbacResourceOperation:   []string{},
	GetProtectedResourceOperation: []string{},
	GetRbacResourceOperation:      []string{},
}

func (s *Server) securityBearerAuth(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t BearerAuth
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Roles = operationRolesBearerAuth[operationName]
	rctx, err := s.sec.HandleBearerAuth(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var operationRolesRbac = map[string][]string{
	CreateRbacResourceOperation: []string{},
	GetRbacResourceOperation:    []string{},
}

func (s *Server) securityRbac(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t Rbac
	if _, ok := findAuthorization(req.Header, "Basic"); !ok {
		return ctx, false, nil
	}
	username, password, ok := req.BasicAuth()
	if !ok {
		return nil, false, errors.New("invalid basic auth")
	}
	t.Username = username
	t.Password = password
	t.Roles = operationRolesRbac[operationName]
	rctx, err := s.sec.HandleRbac(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// BearerAuth provides BearerAuth security value.
	BearerAuth(ctx context.Context, operationName OperationName) (BearerAuth, error)
	// Rbac provides Rbac security value.
	Rbac(ctx context.Context, operationName OperationName) (Rbac, error)
}

func (s *Client) securityBearerAuth(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.BearerAuth(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"BearerAuth\"")
	}
	req.Header.Set("Authorization", "Bearer "+t.Token)
	return nil
}
func (s *Client) securityRbac(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.Rbac(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"Rbac\"")
	}
	req.SetBasicAuth(t.Username, t.Password)
	return nil
}
